% docker

# 删除一个镜像
docker image rm <image_id>

# 从本地镜像存储中删除一个镜像
docker rmi <image_id>

# 清理无标签/悬空镜像
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

# 强制清理无标签/悬空镜像
docker rmi $(docker images --filter "dangling=true" -q --no-trunc) -f

# 列出所有本地存储的镜像
docker images

# 从当前目录的 Dockerfile 构建镜像并标记镜像
docker build -t <image>:<version> .

# 从注册表中拉取镜像
docker pull <image>:<version>

# 通过 SIGTERM 停止运行中的容器
docker stop <container_id>

# 通过 SIGKILL 停止运行中的容器
docker kill <container_id>

# 列出网络
docker network ls

# 列出运行中的容器
docker ps

# 删除所有运行和停止的容器
docker rm -f $(docker ps -aq)

# 在容器内创建一个新的 bash 进程并连接到终端
docker exec -it <container_id> bash

# 打印容器日志的最后几行
docker logs --tail 100 <container_id> | less

# 打印容器日志的最后几行并跟随日志
docker logs --tail 100 <container_id> -f

# 创建新网络
docker network create <network_name>

$ image_id: docker images --- --headers 1 --column 3
$ container_id: docker ps --- --headers 1 --column 1



% docker-compose

# 构建、（重新）创建、启动并附加到所有服务的容器
docker-compose up

# 构建、（重新）创建、启动并分离到所有服务的容器
docker-compose up -d

# 构建、（重新）创建、启动并附加到某个服务的容器
docker-compose up -d <service_name>

# 构建、（重新）创建、启动并分离到某个服务的容器
docker-compose up -d <service_name>

# 打印服务日志的最后几行
docker-compose logs --tail 100 <service_name> | less

# 打印服务日志的最后几行并跟随日志
docker-compose logs -f --tail 100 <service_name>

# 停止容器并移除由 up 创建的容器和网络
docker-compose down
